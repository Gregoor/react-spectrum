diff --git a/node_modules/@spectrum-css/component-builder/css/processors.js b/node_modules/@spectrum-css/component-builder/css/processors.js
index 9556e04..27c9a78 100644
--- a/node_modules/@spectrum-css/component-builder/css/processors.js
+++ b/node_modules/@spectrum-css/component-builder/css/processors.js
@@ -15,106 +15,106 @@ const postcssReal = require('postcss');
 function getProcessors(keepVars = false, notNested = true, secondNotNested = true) {
   return [
     require('postcss-import'),
-    require('postcss-mixins')({
-      mixins: {
-        typography: function(mixin, name, tokenName, textTransformIgnore) {
-          if(!tokenName) {
-            tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
-            tokenName = tokenName.replace('.spectrum--', '');
-          }
-          var output = '';
-          var propMap = {
-            'font-size': 'text-size',
-            'font-weight': 'text-font-weight',
-            'line-height': 'text-line-height',
-            'font-style': 'text-font-style',
-            'letter-spacing': 'text-letter-spacing',
-            'text-transform': 'text-transform',
-          };
-          function buildProperties (tokeString) {
-            var ruleString = '';
-            Object.keys(propMap).forEach((key) => {
-              if(!textTransformIgnore || key != 'text-transform') {
-                ruleString += `  ${key}: var(--spectrum-${tokeString}-${propMap[key]});\n`;
-              }
-            });
-            ruleString += '  margin-top: 0;\n  margin-bottom: 0;\n';
-            return ruleString;
-          }
-          output = `${name} {
-          ${buildProperties(tokenName)}
-            em {
-              ${buildProperties(`${tokenName}-emphasis`)}
-            }
-            strong {
-              ${buildProperties(`${tokenName}-strong`)}
-            }
-          }`;
-          var nodes = postcssReal.parse(output);
-          nodes.nodes[0].append(mixin.nodes);
-          mixin.replaceWith(nodes);
-        },
-        typographyColor: function(mixin, name, tokenName) {
-          if(!tokenName) {
-            tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
-            tokenName = tokenName.replace('.spectrum--', '');
-          }
-          var output = `${name} {
-            color: var(--spectrum-${tokenName}-text-color);
-          }`;
-          var nodes = postcssReal.parse(output);
-          nodes.nodes[0].append(mixin.nodes);
-          mixin.replaceWith(nodes);
-        },
-        typographyMargins: function(mixin, name, tokenName) {
-          if(!tokenName) {
-            tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
-            tokenName = tokenName.replace('.spectrum--', '');
-          }
-          var output = `${name} {
-            margin-top: var(--spectrum-${tokenName}-margin-top);
-            margin-bottom: var(--spectrum-${tokenName}-margin-bottom);
-          }`;
-          var nodes = postcssReal.parse(output);
-          nodes.nodes[0].append(mixin.nodes);
-          mixin.replaceWith(nodes);
-        },
-      }
-    }),
-    require('postcss-nested'),
+    // require('postcss-mixins')({
+    //   mixins: {
+    //     typography: function(mixin, name, tokenName, textTransformIgnore) {
+    //       if(!tokenName) {
+    //         tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
+    //         tokenName = tokenName.replace('.spectrum--', '');
+    //       }
+    //       var output = '';
+    //       var propMap = {
+    //         'font-size': 'text-size',
+    //         'font-weight': 'text-font-weight',
+    //         'line-height': 'text-line-height',
+    //         'font-style': 'text-font-style',
+    //         'letter-spacing': 'text-letter-spacing',
+    //         'text-transform': 'text-transform',
+    //       };
+    //       function buildProperties (tokeString) {
+    //         var ruleString = '';
+    //         Object.keys(propMap).forEach((key) => {
+    //           if(!textTransformIgnore || key != 'text-transform') {
+    //             ruleString += `  ${key}: var(--spectrum-${tokeString}-${propMap[key]});\n`;
+    //           }
+    //         });
+    //         ruleString += '  margin-top: 0;\n  margin-bottom: 0;\n';
+    //         return ruleString;
+    //       }
+    //       output = `${name} {
+    //       ${buildProperties(tokenName)}
+    //         em {
+    //           ${buildProperties(`${tokenName}-emphasis`)}
+    //         }
+    //         strong {
+    //           ${buildProperties(`${tokenName}-strong`)}
+    //         }
+    //       }`;
+    //       var nodes = postcssReal.parse(output);
+    //       nodes.nodes[0].append(mixin.nodes);
+    //       mixin.replaceWith(nodes);
+    //     },
+    //     typographyColor: function(mixin, name, tokenName) {
+    //       if(!tokenName) {
+    //         tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
+    //         tokenName = tokenName.replace('.spectrum--', '');
+    //       }
+    //       var output = `${name} {
+    //         color: var(--spectrum-${tokenName}-text-color);
+    //       }`;
+    //       var nodes = postcssReal.parse(output);
+    //       nodes.nodes[0].append(mixin.nodes);
+    //       mixin.replaceWith(nodes);
+    //     },
+    //     typographyMargins: function(mixin, name, tokenName) {
+    //       if(!tokenName) {
+    //         tokenName = name.replace(/\.?([A-Z]|[0-9])/g, function (x,y) { return '-' + y.toLowerCase(); }).replace(/^-/, '');
+    //         tokenName = tokenName.replace('.spectrum--', '');
+    //       }
+    //       var output = `${name} {
+    //         margin-top: var(--spectrum-${tokenName}-margin-top);
+    //         margin-bottom: var(--spectrum-${tokenName}-margin-bottom);
+    //       }`;
+    //       var nodes = postcssReal.parse(output);
+    //       nodes.nodes[0].append(mixin.nodes);
+    //       mixin.replaceWith(nodes);
+    //     },
+    //   }
+    // }),
+    // require('postcss-nested'),
     require('postcss-inherit'),
     require('postcss-custom-properties')({
       noValueNotifications: 'error',
       warnings: !keepVars
     }),
     require('./plugins/postcss-custom-properties-passthrough')(),
-    require('postcss-calc'),
+    // require('postcss-calc'),
     keepVars ? require('./plugins/postcss-custom-properties-mapping') : null,
     notNested ? require('./plugins/postcss-notnested')({ replace: '.spectrum' }) : null,
     require('postcss-svg'),
-    require('postcss-functions')({
-      functions: {
-        noscale: function(value) {
-          return value.toString().toUpperCase();
-        },
-        percent: function(value) {
-          return parseInt(value, 10) / 100;
-        }
-      }
-    }),
+    // require('postcss-functions')({
+    //   functions: {
+    //     noscale: function(value) {
+    //       return value.toString().toUpperCase();
+    //     },
+    //     percent: function(value) {
+    //       return parseInt(value, 10) / 100;
+    //     }
+    //   }
+    // }),
     require('./plugins/postcss-strip-comments')({ preserveTopdoc: false }),
     require('postcss-focus-ring'),
     secondNotNested ? require('./plugins/postcss-notnested')() : null, // Second one to catch all stray &
     require('postcss-discard-empty'),
-    require('autoprefixer')({
-      'browsers': [
-        'IE >= 10',
-        'last 2 Chrome versions',
-        'last 2 Firefox versions',
-        'last 2 Safari versions',
-        'last 2 iOS versions'
-      ]
-    })
+    // require('autoprefixer')({
+    //   'browsers': [
+    //     'IE >= 10',
+    //     'last 2 Chrome versions',
+    //     'last 2 Firefox versions',
+    //     'last 2 Safari versions',
+    //     'last 2 iOS versions'
+    //   ]
+    // })
   ].filter(Boolean);
 }
 
